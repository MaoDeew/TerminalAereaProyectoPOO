package Inicial;

import Objetos.Aerolinea;
import Objetos.Vuelo;
import Objetos.Aeropuerto;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Calendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Mao
 */
public class Registro extends javax.swing.JFrame {

    File archivoAeropuertos = new File("aeropuertos.aer");
    File archivoAerolineas = new File("aerolineas.al");
    File archivoVuelos = new File("vuelos.vu");

    HashMap<String, Aeropuerto> listadoAeropuertos = new HashMap<>();
    HashMap<String, Aerolinea> listadoAerolineas = new HashMap<>();
    HashMap<String, Vuelo> listadoVuelos = new HashMap<>();

    DefaultTableModel modeloTablaAeropuertos;
    DefaultTableModel modeloTablaAerolineas;

    public Registro() {
        initComponents();
        leerAeropuertos();
        leerAerolineas();
        leerVuelos();

        //Datos Tablas
        String cabeceraAeropuerto[] = {"Codigo", "Nombre", "Ciudad"};
        String cabeceraAerolineas[] = {"Codigo", "Nombre"};
        String datos[][] = {};
        modeloTablaAeropuertos = new DefaultTableModel(datos, cabeceraAeropuerto);
        modeloTablaAerolineas = new DefaultTableModel(datos, cabeceraAerolineas);

        tablaAeropuertos1.setModel(modeloTablaAeropuertos);
        tablaAeropuertos2.setModel(modeloTablaAeropuertos);
        tablaAerolineas.setModel(modeloTablaAerolineas);
    }

    public void leerAeropuertos() {
        try {
            FileInputStream fos = new FileInputStream(archivoAeropuertos);
            ObjectInputStream ois = new ObjectInputStream(fos);
            listadoAeropuertos = (HashMap<String, Aeropuerto>) ois.readObject();
            ois.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error Leyendo, aún no existe el archivo: aeropuertos.aer");
        }
    }

    public final void leerAerolineas() {
        try {
            FileInputStream fos = new FileInputStream(archivoAerolineas);
            ObjectInputStream ois = new ObjectInputStream(fos);
            listadoAerolineas = (HashMap<String, Aerolinea>) ois.readObject();
            ois.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error Leyendo, aún no existe el archivo: aerolineas.al");
        }

    }

    public final void leerVuelos() {
        try {
            FileInputStream fos = new FileInputStream(archivoVuelos);
            ObjectInputStream ois = new ObjectInputStream(fos);
            listadoVuelos = (HashMap<String, Vuelo>) ois.readObject();
            ois.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error Leyendo, aún no existe el archivo: vuelos.vu");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelAeropuertos = new javax.swing.JPanel();
        labelTituloAeropuertos = new javax.swing.JLabel();
        labelNombreAeropuertos = new javax.swing.JLabel();
        campoNombreAeropuerto = new javax.swing.JTextField();
        labelCodigoAeropuerto = new javax.swing.JLabel();
        campoCodigoAeropuerto = new javax.swing.JTextField();
        botonRegistrarAeropuerto = new javax.swing.JButton();
        labelCiudadAeropuerto = new javax.swing.JLabel();
        campoCiudadAeropuerto = new javax.swing.JTextField();
        labelTitulo = new javax.swing.JLabel();
        panelAerolineas = new javax.swing.JPanel();
        labelTituloAerolinea = new javax.swing.JLabel();
        labelNombreAerolinea = new javax.swing.JLabel();
        labelCodigoAerolinea = new javax.swing.JLabel();
        campoNombreAerolinea = new javax.swing.JTextField();
        campoCodigoAerolinea = new javax.swing.JTextField();
        botonRegistrarAerolinea = new javax.swing.JButton();
        panelVuelos = new javax.swing.JPanel();
        labelTituloVuelos = new javax.swing.JLabel();
        botonCargarAeropuertos = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaAeropuertos1 = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false; //Disallow the editing of any cell
            }
        };
        labelSeleccionVueloOrigen = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaAeropuertos2 = new javax.swing.JTable();
        labelSeleccionVueloDestino = new javax.swing.JLabel();
        botonCargarAerolineas = new javax.swing.JButton();
        labelAeropuertoOrigen = new javax.swing.JLabel();
        labelAeropuertoDestino = new javax.swing.JLabel();
        campoAeropuertoOrigen = new javax.swing.JTextField();
        campoAeropuertoDestino = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaAerolineas = new javax.swing.JTable();
        labelSeleccionAerolinea = new javax.swing.JLabel();
        campoAerolinea = new javax.swing.JTextField();
        labelSeleccionFechaOrigen = new javax.swing.JLabel();
        chooserFechaOrigen = new com.toedter.calendar.JDateChooser();
        labelSeleccionHoraOrigen = new javax.swing.JLabel();
        spinnerValueHora1 = new javax.swing.JSpinner();
        spinnerValueMinutos1 = new javax.swing.JSpinner();
        spinnerAmPm1 = new javax.swing.JSpinner();
        labelSeleccionFechaDestino = new javax.swing.JLabel();
        chooserFechaDestino = new com.toedter.calendar.JDateChooser();
        labelSeleccionHoraDestino = new javax.swing.JLabel();
        spinnerValueHora2 = new javax.swing.JSpinner();
        spinnerValueMinutos2 = new javax.swing.JSpinner();
        spinnerAmPm2 = new javax.swing.JSpinner();
        labelCodigoVuelo = new javax.swing.JLabel();
        campoCodigoVuelo = new javax.swing.JTextField();
        labelPrecioEjecutiva = new javax.swing.JLabel();
        labelPrecioEconomica = new javax.swing.JLabel();
        campoPrecioEjecutiva = new javax.swing.JTextField();
        campoPrecioEconomica = new javax.swing.JTextField();
        botonRegistrarVuelo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panelAeropuertos.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panelAeropuertos.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        labelTituloAeropuertos.setText("Aeropuertos");

        labelNombreAeropuertos.setText("Nombre:");

        campoNombreAeropuerto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                campoNombreAeropuertoKeyTyped(evt);
            }
        });

        labelCodigoAeropuerto.setText("Código:");

        campoCodigoAeropuerto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                campoCodigoAeropuertoKeyTyped(evt);
            }
        });

        botonRegistrarAeropuerto.setText("Registrar Aeropuerto");
        botonRegistrarAeropuerto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRegistrarAeropuertoActionPerformed(evt);
            }
        });

        labelCiudadAeropuerto.setText("Ciudad:");

        javax.swing.GroupLayout panelAeropuertosLayout = new javax.swing.GroupLayout(panelAeropuertos);
        panelAeropuertos.setLayout(panelAeropuertosLayout);
        panelAeropuertosLayout.setHorizontalGroup(
            panelAeropuertosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAeropuertosLayout.createSequentialGroup()
                .addGroup(panelAeropuertosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAeropuertosLayout.createSequentialGroup()
                        .addComponent(labelTituloAeropuertos)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(panelAeropuertosLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panelAeropuertosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelNombreAeropuertos)
                            .addComponent(labelCiudadAeropuerto)
                            .addComponent(labelCodigoAeropuerto))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelAeropuertosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(campoNombreAeropuerto)
                            .addComponent(campoCodigoAeropuerto)
                            .addComponent(campoCiudadAeropuerto, javax.swing.GroupLayout.DEFAULT_SIZE, 108, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                        .addComponent(botonRegistrarAeropuerto, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        panelAeropuertosLayout.setVerticalGroup(
            panelAeropuertosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAeropuertosLayout.createSequentialGroup()
                .addComponent(labelTituloAeropuertos)
                .addGap(24, 24, 24)
                .addGroup(panelAeropuertosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNombreAeropuertos)
                    .addComponent(campoNombreAeropuerto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAeropuertosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelCiudadAeropuerto)
                    .addComponent(campoCiudadAeropuerto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAeropuertosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(campoCodigoAeropuerto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelCodigoAeropuerto)
                    .addComponent(botonRegistrarAeropuerto))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        labelTitulo.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        labelTitulo.setText("REGISTRO");

        panelAerolineas.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        labelTituloAerolinea.setText("Aerolinea");

        labelNombreAerolinea.setText("Nombre:");

        labelCodigoAerolinea.setText("Código:");

        campoNombreAerolinea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                campoNombreAerolineaKeyTyped(evt);
            }
        });

        campoCodigoAerolinea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                campoCodigoAerolineaKeyTyped(evt);
            }
        });

        botonRegistrarAerolinea.setText("Registrar Aerolinea");
        botonRegistrarAerolinea.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRegistrarAerolineaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelAerolineasLayout = new javax.swing.GroupLayout(panelAerolineas);
        panelAerolineas.setLayout(panelAerolineasLayout);
        panelAerolineasLayout.setHorizontalGroup(
            panelAerolineasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAerolineasLayout.createSequentialGroup()
                .addComponent(labelTituloAerolinea)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(panelAerolineasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelAerolineasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAerolineasLayout.createSequentialGroup()
                        .addComponent(labelNombreAerolinea)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(campoNombreAerolinea, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelAerolineasLayout.createSequentialGroup()
                        .addComponent(labelCodigoAerolinea)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(campoCodigoAerolinea, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(botonRegistrarAerolinea, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelAerolineasLayout.setVerticalGroup(
            panelAerolineasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAerolineasLayout.createSequentialGroup()
                .addComponent(labelTituloAerolinea)
                .addGap(18, 18, 18)
                .addGroup(panelAerolineasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelNombreAerolinea)
                    .addComponent(campoNombreAerolinea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelAerolineasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelCodigoAerolinea)
                    .addComponent(campoCodigoAerolinea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonRegistrarAerolinea))
                .addGap(0, 31, Short.MAX_VALUE))
        );

        panelVuelos.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        labelTituloVuelos.setText("Vuelos");

        botonCargarAeropuertos.setText("Cargar Aeropuertos");
        botonCargarAeropuertos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCargarAeropuertosActionPerformed(evt);
            }
        });

        tablaAeropuertos1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaAeropuertos1.setSelectionBackground(new java.awt.Color(0, 255, 255));
        tablaAeropuertos1.setSelectionForeground(new java.awt.Color(0, 0, 0));
        tablaAeropuertos1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaAeropuertos1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaAeropuertos1);

        labelSeleccionVueloOrigen.setText("Seleccione el Aeropuerto de Origen:");

        tablaAeropuertos2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaAeropuertos2.setSelectionBackground(new java.awt.Color(0, 255, 255));
        tablaAeropuertos2.setSelectionForeground(new java.awt.Color(0, 0, 0));
        tablaAeropuertos2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaAeropuertos2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tablaAeropuertos2);

        labelSeleccionVueloDestino.setText("Seleccion el Aeropuerto de Destino:");

        botonCargarAerolineas.setText("Cargar Aerolineas");
        botonCargarAerolineas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCargarAerolineasActionPerformed(evt);
            }
        });

        labelAeropuertoOrigen.setText("Origen:");

        labelAeropuertoDestino.setText("Destino:");

        campoAeropuertoOrigen.setEditable(false);

        campoAeropuertoDestino.setEditable(false);

        tablaAerolineas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaAerolineas.setSelectionBackground(new java.awt.Color(0, 255, 255));
        tablaAerolineas.setSelectionForeground(new java.awt.Color(0, 0, 0));
        tablaAerolineas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaAerolineasMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tablaAerolineas);

        labelSeleccionAerolinea.setText("Seleccione la Aerolinea para el vuelo:");

        labelSeleccionFechaOrigen.setText("Seleccione la fecha de partida:");

        labelSeleccionHoraOrigen.setText("Selecciones la hora de partida:");

        spinnerValueHora1.setModel(new javax.swing.SpinnerNumberModel(1, 1, 12, 1));

        spinnerValueMinutos1.setModel(new javax.swing.SpinnerNumberModel(1, 1, 59, 1));

        spinnerAmPm1.setModel(new javax.swing.SpinnerListModel(new String[] {"A.M.", "P.M."}));

        labelSeleccionFechaDestino.setText("Seleccione la fecha de regreso:");

        labelSeleccionHoraDestino.setText("Seleccione la hora de regreso:");

        spinnerValueHora2.setModel(new javax.swing.SpinnerNumberModel(1, 1, 12, 1));

        spinnerValueMinutos2.setModel(new javax.swing.SpinnerNumberModel(1, 1, 59, 1));

        spinnerAmPm2.setModel(new javax.swing.SpinnerListModel(new String[] {"A.M.", "P.M."}));

        labelCodigoVuelo.setText("Codigo del Vuelo:");

        campoCodigoVuelo.setEditable(false);

        labelPrecioEjecutiva.setText("Precio Ejecutivo:");

        labelPrecioEconomica.setText("Precio Economico:");

        campoPrecioEjecutiva.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                campoPrecioEjecutivaKeyTyped(evt);
            }
        });

        campoPrecioEconomica.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                campoPrecioEconomicaKeyTyped(evt);
            }
        });

        botonRegistrarVuelo.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        botonRegistrarVuelo.setText("Registrar Vuelo");
        botonRegistrarVuelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonRegistrarVueloActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelVuelosLayout = new javax.swing.GroupLayout(panelVuelos);
        panelVuelos.setLayout(panelVuelosLayout);
        panelVuelosLayout.setHorizontalGroup(
            panelVuelosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelVuelosLayout.createSequentialGroup()
                .addComponent(labelTituloVuelos)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(panelVuelosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelVuelosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelVuelosLayout.createSequentialGroup()
                        .addComponent(botonCargarAeropuertos)
                        .addGap(30, 30, 30)
                        .addComponent(labelCodigoVuelo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(campoCodigoVuelo, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelVuelosLayout.createSequentialGroup()
                        .addGroup(panelVuelosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelVuelosLayout.createSequentialGroup()
                                .addComponent(labelSeleccionVueloOrigen)
                                .addGap(95, 95, 95)
                                .addComponent(labelSeleccionVueloDestino))
                            .addGroup(panelVuelosLayout.createSequentialGroup()
                                .addGroup(panelVuelosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelVuelosLayout.createSequentialGroup()
                                        .addComponent(labelAeropuertoOrigen)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(campoAeropuertoOrigen))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(panelVuelosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelVuelosLayout.createSequentialGroup()
                                        .addComponent(labelAeropuertoDestino)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(campoAeropuertoDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(botonCargarAerolineas)
                            .addGroup(panelVuelosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelVuelosLayout.createSequentialGroup()
                                    .addComponent(labelSeleccionAerolinea)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(campoAerolinea))
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(69, 69, 69)
                        .addGroup(panelVuelosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelVuelosLayout.createSequentialGroup()
                                .addComponent(labelPrecioEconomica)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(panelVuelosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(botonRegistrarVuelo, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(panelVuelosLayout.createSequentialGroup()
                                        .addComponent(campoPrecioEconomica)
                                        .addGap(65, 65, 65))))
                            .addGroup(panelVuelosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(panelVuelosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(panelVuelosLayout.createSequentialGroup()
                                        .addComponent(labelSeleccionFechaOrigen)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(chooserFechaOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(panelVuelosLayout.createSequentialGroup()
                                        .addComponent(labelSeleccionHoraOrigen)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(spinnerValueHora1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(spinnerValueMinutos1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(spinnerAmPm1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(panelVuelosLayout.createSequentialGroup()
                                    .addComponent(labelSeleccionFechaDestino)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(chooserFechaDestino, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(17, 17, 17)))
                            .addGroup(panelVuelosLayout.createSequentialGroup()
                                .addComponent(labelSeleccionHoraDestino)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spinnerValueHora2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spinnerValueMinutos2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(spinnerAmPm2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelVuelosLayout.createSequentialGroup()
                                .addComponent(labelPrecioEjecutiva)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(campoPrecioEjecutiva, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(57, Short.MAX_VALUE))
        );
        panelVuelosLayout.setVerticalGroup(
            panelVuelosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelVuelosLayout.createSequentialGroup()
                .addComponent(labelTituloVuelos)
                .addGap(4, 4, 4)
                .addGroup(panelVuelosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonCargarAeropuertos)
                    .addComponent(labelCodigoVuelo)
                    .addComponent(campoCodigoVuelo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelVuelosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelVuelosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labelSeleccionVueloOrigen)
                        .addComponent(labelSeleccionVueloDestino)
                        .addComponent(labelSeleccionFechaOrigen))
                    .addComponent(chooserFechaOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelVuelosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelVuelosLayout.createSequentialGroup()
                        .addGroup(panelVuelosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelSeleccionHoraOrigen)
                            .addComponent(spinnerValueHora1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spinnerValueMinutos1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spinnerAmPm1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addGroup(panelVuelosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(labelSeleccionFechaDestino)
                            .addComponent(chooserFechaDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelVuelosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelSeleccionHoraDestino)
                            .addComponent(spinnerValueHora2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spinnerValueMinutos2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spinnerAmPm2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(1, 1, 1)
                .addGroup(panelVuelosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelAeropuertoOrigen)
                    .addComponent(campoAeropuertoOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelAeropuertoDestino)
                    .addComponent(campoAeropuertoDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panelVuelosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botonCargarAerolineas)
                    .addGroup(panelVuelosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labelPrecioEjecutiva)
                        .addComponent(campoPrecioEjecutiva, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelVuelosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(campoPrecioEconomica, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelVuelosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labelSeleccionAerolinea)
                        .addComponent(campoAerolinea, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(labelPrecioEconomica)))
                .addGroup(panelVuelosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelVuelosLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(22, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelVuelosLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(botonRegistrarVuelo, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelTitulo)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(panelAeropuertos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(panelAerolineas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(panelVuelos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(labelTitulo)
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelAeropuertos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelAerolineas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelVuelos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void campoNombreAeropuertoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoNombreAeropuertoKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();

        if (Character.isDigit(c)) {
            getToolkit().beep();

            evt.consume();
        }
    }//GEN-LAST:event_campoNombreAeropuertoKeyTyped

    private void campoCodigoAeropuertoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoCodigoAeropuertoKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();

        if (Character.isDigit(c)) {
            getToolkit().beep();

            evt.consume();
        }

    }//GEN-LAST:event_campoCodigoAeropuertoKeyTyped

    private void botonRegistrarAeropuertoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRegistrarAeropuertoActionPerformed

        if (campoCodigoAeropuerto.getText().length() > 3) {
            JOptionPane.showMessageDialog(null, "Solo se admiten 3 caracteres como código de Aeropuerto.");
        } else {

            String codigoAeropuerto = campoCodigoAeropuerto.getText();
            String nombreAeropuerto = campoNombreAeropuerto.getText();
            String ciudadAeropuerto = campoCiudadAeropuerto.getText();

            if (codigoAeropuerto.equals("") || nombreAeropuerto.equals("") || ciudadAeropuerto.equals("")) {
                JOptionPane.showMessageDialog(null, "Verifique que los 3 campos no esten vacios.");
            } else {

                Aeropuerto aeropuerto = new Aeropuerto(codigoAeropuerto, nombreAeropuerto, ciudadAeropuerto);
                listadoAeropuertos.put(codigoAeropuerto, aeropuerto);
                almacenarAeropuerto();
                JOptionPane.showMessageDialog(null, "Aeropuerto registrado correctamente.");
                limpiarCamposAeropuerto();
            }

        }

    }//GEN-LAST:event_botonRegistrarAeropuertoActionPerformed

    private void limpiarCamposAeropuerto() {
        campoCodigoAeropuerto.setText("");
        campoNombreAeropuerto.setText("");
        campoCiudadAeropuerto.setText("");
    }

    private void campoNombreAerolineaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoNombreAerolineaKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();

        if (Character.isDigit(c)) {
            getToolkit().beep();

            evt.consume();
        }

    }//GEN-LAST:event_campoNombreAerolineaKeyTyped

    private void campoCodigoAerolineaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoCodigoAerolineaKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();

        if (Character.isDigit(c)) {
            getToolkit().beep();

            evt.consume();
        }
    }//GEN-LAST:event_campoCodigoAerolineaKeyTyped

    private void botonRegistrarAerolineaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRegistrarAerolineaActionPerformed
        // TODO add your handling code here:
        if (campoCodigoAerolinea.getText().length() > 7) {
            JOptionPane.showMessageDialog(null, "Solo se admiten 7 letras como código de Aeropuerto.");
        } else {

            String codigoAerolinea = campoCodigoAerolinea.getText();
            String nombreAerolinea = campoNombreAerolinea.getText();

            if (codigoAerolinea.equals("") || nombreAerolinea.equals("")) {
                JOptionPane.showMessageDialog(null, "Verifique que los 2 campos no esten vacios.");
            } else {
                Aerolinea aerolinea = new Aerolinea(codigoAerolinea, nombreAerolinea);
                listadoAerolineas.put(codigoAerolinea, aerolinea);
                almacenarAerolinea();
                JOptionPane.showMessageDialog(null, "Aerolinea registrada correctamente.");
                limpiarCamposAerolinea();
            }

        }
    }//GEN-LAST:event_botonRegistrarAerolineaActionPerformed

    private void limpiarCamposAerolinea() {
        campoCodigoAerolinea.setText("");
        campoNombreAerolinea.setText("");
    }

    private void botonCargarAeropuertosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCargarAeropuertosActionPerformed
        // TODO add your handling code here:
        Iterator it = listadoAeropuertos.entrySet().iterator();

        while (it.hasNext()) {

            Map.Entry e = (Map.Entry) it.next();

            String codigo = e.getKey().toString();
            String nombreAeropuerto = listadoAeropuertos.get(e.getKey()).getNombre();
            String ciudad = listadoAeropuertos.get(e.getKey()).getCiudad();
            String mostrarTabla[] = {codigo, nombreAeropuerto, ciudad};

            ((DefaultTableModel) tablaAeropuertos1.getModel()).addRow(mostrarTabla);

        }

        botonCargarAeropuertos.setEnabled(false);
    }//GEN-LAST:event_botonCargarAeropuertosActionPerformed

    private void tablaAeropuertos1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaAeropuertos1MouseClicked
        // TODO add your handling code here:
        int fila = tablaAeropuertos1.rowAtPoint(evt.getPoint());
        if (fila > -1) {

            String codigo = tablaAeropuertos1.getValueAt(fila, 0).toString();
            String nombre = tablaAeropuertos1.getValueAt(fila, 1).toString();
            String ciudad = tablaAeropuertos1.getValueAt(fila, 2).toString();

            campoAeropuertoOrigen.setText(codigo + "," + nombre + "," + ciudad);

        }
    }//GEN-LAST:event_tablaAeropuertos1MouseClicked

    private void tablaAeropuertos2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaAeropuertos2MouseClicked
        // TODO add your handling code here:
        int fila = tablaAeropuertos2.rowAtPoint(evt.getPoint());
        if (fila > -1) {

            String codigo = tablaAeropuertos2.getValueAt(fila, 0).toString();
            String nombre = tablaAeropuertos2.getValueAt(fila, 1).toString();
            String ciudad = tablaAeropuertos2.getValueAt(fila, 2).toString();

            campoAeropuertoDestino.setText(codigo + "," + nombre + "," + ciudad);
        }
    }//GEN-LAST:event_tablaAeropuertos2MouseClicked

    private void botonCargarAerolineasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCargarAerolineasActionPerformed
        // TODO add your handling code here:
        Iterator it = listadoAerolineas.entrySet().iterator();

        while (it.hasNext()) {

            Map.Entry e = (Map.Entry) it.next();

            String codigo = e.getKey().toString();
            String nombreAeropuerto = listadoAerolineas.get(e.getKey()).getNombre();
            String mostrarTabla[] = {codigo, nombreAeropuerto};

            ((DefaultTableModel) tablaAerolineas.getModel()).addRow(mostrarTabla);

        }
        botonCargarAerolineas.setEnabled(false);
    }//GEN-LAST:event_botonCargarAerolineasActionPerformed

    private void tablaAerolineasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaAerolineasMouseClicked
        // TODO add your handling code here:
        int fila = tablaAerolineas.rowAtPoint(evt.getPoint());
        if (fila > -1) {

            String codigo = tablaAerolineas.getValueAt(fila, 0).toString();
            String nombre = tablaAerolineas.getValueAt(fila, 1).toString();

            campoAerolinea.setText(codigo + "," + nombre);
            int numeroTabla = (int) (Math.random() * (100 - 250) + 250);
            campoCodigoVuelo.setText(codigo + "-" + numeroTabla);
        }
    }//GEN-LAST:event_tablaAerolineasMouseClicked

    private void campoPrecioEjecutivaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoPrecioEjecutivaKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();

        if (Character.isAlphabetic(c)) {
            getToolkit().beep();

            evt.consume();
        }
    }//GEN-LAST:event_campoPrecioEjecutivaKeyTyped

    private void campoPrecioEconomicaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_campoPrecioEconomicaKeyTyped
        // TODO add your handling code here:
        char c = evt.getKeyChar();

        if (Character.isAlphabetic(c)) {
            getToolkit().beep();

            evt.consume();
        }
    }//GEN-LAST:event_campoPrecioEconomicaKeyTyped

    private void botonRegistrarVueloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonRegistrarVueloActionPerformed
        // TODO add your handling code here:

        //Codigo Vuelo
        String codigoVuelo = campoCodigoVuelo.getText();

        //PreValidacion
        String aerolineaFull = campoAerolinea.getText();
        String aeropuertoFullOrigen = campoAeropuertoOrigen.getText();
        String aeropuertoFullDestino = campoAeropuertoDestino.getText();
        //Aerolinea

        if (!"".equals(aerolineaFull) && !"".equals(aeropuertoFullOrigen) && !"".equals(aeropuertoFullDestino)) {
            String splitAerolinea[] = aerolineaFull.split(",");
            String codigoAerolinea = splitAerolinea[0];
            String nombreAerolinea = splitAerolinea[1];
            Aerolinea aerolinea = new Aerolinea(codigoAerolinea, nombreAerolinea);

            //Sillas
            int precioClaseEjecutiva = Integer.parseInt(campoPrecioEjecutiva.getText());
            int precioClaseEconomica = Integer.parseInt(campoPrecioEconomica.getText());

            //Aeropuerto Origen
            String splitAeropuerto1[] = aeropuertoFullOrigen.split(",");
            String codigoAeropuerto1 = splitAeropuerto1[0];
            String nombreAeropuerto1 = splitAeropuerto1[1];
            String ciudadAeropuerto1 = splitAeropuerto1[2];
            Aeropuerto origenTrayecto = new Aeropuerto(codigoAeropuerto1, nombreAeropuerto1, ciudadAeropuerto1);

            //Aeropuerto Destino
            String splitAeropuerto2[] = aeropuertoFullDestino.split(",");
            String codigoAeropuerto2 = splitAeropuerto2[0];
            String nombreAeropuerto2 = splitAeropuerto2[1];
            String ciudadAeropuerto2 = splitAeropuerto2[2];
            Aeropuerto destinoTrayecto = new Aeropuerto(codigoAeropuerto2, nombreAeropuerto2, ciudadAeropuerto2);

            if (aeropuertoFullOrigen.equals(aeropuertoFullDestino)) {
                JOptionPane.showMessageDialog(null, "No puede poner el mismo aeropuerto de Destino como el de Regreso");

            }

            //Fecha y Hora
            String diaOrigen = Integer.toString(chooserFechaOrigen.getCalendar().get(Calendar.DAY_OF_MONTH));
            String mesOrigen = Integer.toString(chooserFechaOrigen.getCalendar().get(Calendar.MONTH) + 1);
            String yearOrigen = Integer.toString(chooserFechaOrigen.getCalendar().get(Calendar.YEAR));

            String diaDestino = Integer.toString(chooserFechaDestino.getCalendar().get(Calendar.DAY_OF_MONTH));
            String mesDestino = Integer.toString(chooserFechaDestino.getCalendar().get(Calendar.MONTH) + 1);
            String yearDestino = Integer.toString(chooserFechaDestino.getCalendar().get(Calendar.YEAR));

            String fechaOrigen = (diaOrigen + "/" + mesOrigen + "/" + yearOrigen);
            String fechaDestino = (diaDestino + "/" + mesDestino + "/" + yearDestino);
            String horaOrigen = (spinnerValueHora1.getValue().toString() + ":" + spinnerValueMinutos1.getValue().toString() + " " + spinnerAmPm1.getValue().toString());
            String horaDestino = (spinnerValueHora2.getValue().toString() + ":" + spinnerValueMinutos2.getValue().toString() + " " + spinnerAmPm2.getValue().toString());

            if (codigoVuelo.equals("") || aerolineaFull.equals("") || precioClaseEjecutiva == 0 || precioClaseEconomica == 0 || aeropuertoFullOrigen.equals("") || aeropuertoFullDestino.equals("")
                    || fechaOrigen.equals("") || fechaDestino.equals("") || horaOrigen.equals("") || horaDestino.equals("")) {

                JOptionPane.showMessageDialog(null, "Verifique que todos los campos esten completos.");
            } else {
                Vuelo vuelo = new Vuelo(codigoVuelo, aerolinea,
                        precioClaseEjecutiva, precioClaseEconomica, origenTrayecto, destinoTrayecto, fechaOrigen,
                        fechaDestino, horaOrigen, horaDestino);

                listadoVuelos.put(codigoVuelo, vuelo);
                almacenarVuelo();
                JOptionPane.showMessageDialog(null, "Vuelo registrado correctamente.");
                JOptionPane.showMessageDialog(null, vuelo.toString());
                dispose();

            }
        } else {
            JOptionPane.showMessageDialog(null, "Verifique que todos los campos esten completos.");
        }

    }//GEN-LAST:event_botonRegistrarVueloActionPerformed

    public void almacenarAeropuerto() {
        FileOutputStream fs;
        ObjectOutputStream os;
        try {

            fs = new FileOutputStream(archivoAeropuertos);
            os = new ObjectOutputStream(fs);

            os.writeObject(listadoAeropuertos);

        } catch (FileNotFoundException ex) {
        } catch (IOException ex) {

        }

    }

    public void almacenarAerolinea() {
        FileOutputStream fs;
        ObjectOutputStream os;
        try {

            fs = new FileOutputStream(archivoAerolineas);
            os = new ObjectOutputStream(fs);

            os.writeObject(listadoAerolineas);

        } catch (FileNotFoundException ex) {
        } catch (IOException ex) {

        }
    }

    public void almacenarVuelo() {
        FileOutputStream fs;
        ObjectOutputStream os;
        try {

            fs = new FileOutputStream(archivoVuelos);
            os = new ObjectOutputStream(fs);

            os.writeObject(listadoVuelos);

        } catch (FileNotFoundException ex) {
        } catch (IOException ex) {

        }
    }

    public HashMap<String, Aeropuerto> getListadoAeropuertos() {
        return listadoAeropuertos;
    }

    public HashMap<String, Aerolinea> getListadoAerolineas() {
        return listadoAerolineas;
    }

    public HashMap<String, Vuelo> getListadoVuelos() {
        return listadoVuelos;
    }

    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(() -> {
            new Registro().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonCargarAerolineas;
    private javax.swing.JButton botonCargarAeropuertos;
    private javax.swing.JButton botonRegistrarAerolinea;
    private javax.swing.JButton botonRegistrarAeropuerto;
    private javax.swing.JButton botonRegistrarVuelo;
    private javax.swing.JTextField campoAerolinea;
    private javax.swing.JTextField campoAeropuertoDestino;
    private javax.swing.JTextField campoAeropuertoOrigen;
    private javax.swing.JTextField campoCiudadAeropuerto;
    private javax.swing.JTextField campoCodigoAerolinea;
    private javax.swing.JTextField campoCodigoAeropuerto;
    private javax.swing.JTextField campoCodigoVuelo;
    private javax.swing.JTextField campoNombreAerolinea;
    private javax.swing.JTextField campoNombreAeropuerto;
    private javax.swing.JTextField campoPrecioEconomica;
    private javax.swing.JTextField campoPrecioEjecutiva;
    private com.toedter.calendar.JDateChooser chooserFechaDestino;
    private com.toedter.calendar.JDateChooser chooserFechaOrigen;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel labelAeropuertoDestino;
    private javax.swing.JLabel labelAeropuertoOrigen;
    private javax.swing.JLabel labelCiudadAeropuerto;
    private javax.swing.JLabel labelCodigoAerolinea;
    private javax.swing.JLabel labelCodigoAeropuerto;
    private javax.swing.JLabel labelCodigoVuelo;
    private javax.swing.JLabel labelNombreAerolinea;
    private javax.swing.JLabel labelNombreAeropuertos;
    private javax.swing.JLabel labelPrecioEconomica;
    private javax.swing.JLabel labelPrecioEjecutiva;
    private javax.swing.JLabel labelSeleccionAerolinea;
    private javax.swing.JLabel labelSeleccionFechaDestino;
    private javax.swing.JLabel labelSeleccionFechaOrigen;
    private javax.swing.JLabel labelSeleccionHoraDestino;
    private javax.swing.JLabel labelSeleccionHoraOrigen;
    private javax.swing.JLabel labelSeleccionVueloDestino;
    private javax.swing.JLabel labelSeleccionVueloOrigen;
    private javax.swing.JLabel labelTitulo;
    private javax.swing.JLabel labelTituloAerolinea;
    private javax.swing.JLabel labelTituloAeropuertos;
    private javax.swing.JLabel labelTituloVuelos;
    private javax.swing.JPanel panelAerolineas;
    private javax.swing.JPanel panelAeropuertos;
    private javax.swing.JPanel panelVuelos;
    private javax.swing.JSpinner spinnerAmPm1;
    private javax.swing.JSpinner spinnerAmPm2;
    private javax.swing.JSpinner spinnerValueHora1;
    private javax.swing.JSpinner spinnerValueHora2;
    private javax.swing.JSpinner spinnerValueMinutos1;
    private javax.swing.JSpinner spinnerValueMinutos2;
    private javax.swing.JTable tablaAerolineas;
    private javax.swing.JTable tablaAeropuertos1;
    private javax.swing.JTable tablaAeropuertos2;
    // End of variables declaration//GEN-END:variables
}
